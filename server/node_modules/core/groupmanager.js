class Group {
	/**
	 * @constructor
	 * @param {Object} var1
	 * @param {string} var1.name
	 * @param {Array.<Group>} var1.inheritances
	 */
	constructor(var1) {
		this._name = null;
		this._inheritances = [];

		if(!(typeof var1 === 'object')) {
			return;
		}

		if(typeof var1.name === 'string') {
			this.setName(var1.name);
		}

		if(Array.isArray(var1.inheritances)) {
			this.setInheritances(var1.inheritances);
		}
	};

	/**
	 * @param {string} var1
	 */
	setName(var1) {
		if(!(typeof var1 === 'string')) {
			return;
		}

		this._name = var1;
	};

	/**
	 * @param {Group|String} var1
	 */
	addInheritance(var1) {
		if(var1 instanceof Group) {
			if(!(this.getInheritances().indexOf(var1) < 0)) {
				return;
			}

			this._inheritances.push(var1);
		} else if(typeof var1 === 'string') {
			let inheritance = GroupManager.getInstance().getGroup(var1);

			if(!(inheritance instanceof Group)) {
				return;
			}

			this._inheritances.push(inheritance);
		}
	};

	/**
	 * @param {Array.<Group>|Array.<String>} var1
	 */
	setInheritances(var1) {
		for(let inheritance of var1) {
			if(!(inheritance instanceof Group || typeof inheritance === 'string')) {
				return;
			}

			this.addInheritance(inheritance);
		}
	};

	/**
	 * @return {String}
	 */
	getName() {
		return this._name;
	};

	/**
	 * @return {Array.<Group>}
	 */
	getInheritances() {
		return this._inheritances;
	};

	/**
	 * @param {String|Group} var1
	 * @return {boolean}
	 */
	is(var1) {
		if(typeof var1 === 'string') {
			var1 = GroupManager.getInstance().getGroup(var1);
		}

		if(!(var1 instanceof Group)) {
			return false;
		}

		if(var1 === this) {
			return true;
		}

		for(let inheritance of this.getInheritances()) {
			if(inheritance.is(var1)) return true;
		}

		return false;
	};
};

/**
 * @class
 */
class GroupManager {
	/**
	 * @constructor
	 */
	constructor() {
		this._groups = {};

		this._default_group = null;
		this._administrator_group = null;
	};

	/**
	 * @param {Object} var1
	 * @param {string} var1.name
	 * @param {Array.<String>} var1.inheritances
	 * @return {Group}
	 */
	addGroup(var1) {
		if(!(typeof var1 === 'object' && typeof var1.name === 'string')) {
			return;
		}

		let name = var1.name.toLowerCase();

		if(!(typeof this._groups[name] === 'undefined')) {
			return;
		}

		let group = this._groups[name] = new Group({
			name : var1.name,
			inheritances : var1.inheritances
		});

		// force admin to access to all channel (by adding all group as inheritance of admin group)
		let administrator_group = this.getAdministratorGroup();
		if(administrator_group instanceof Group) {
			administrator_group.addInheritance(group);
		}

		return group;
	};

	/**
	 * @param {Group|string} var1
	 */
	setDefaultGroup(var1) {
		if(typeof var1 === 'string') {
			var1 = this.getGroup(var1);
		}

		if(!(var1 instanceof Group)) {
			return
		}

		this._default_group = var1;
	};

	/**
	 * @param {Group|String} var1
	 */
	setAdministratorGroup(var1) {
		if(typeof var1 === 'string') {
			var1 = this.getGroup(var1);
		}

		if(!(var1 instanceof Group)) {
			return
		}

		this._administrator_group = var1;
	};

	/**
	 * @param {string|Group} var1
	 * @return {Group|null}
	 */
	getGroup(var1) {
		if(var1 instanceof Group) {
			return var1;
		}

		let group = this.getGroups()[var1.toLowerCase()];

		if(!(group instanceof Group)) {
			return null;
		}

		return group;
	};
	
	/**
	 * @return {Object}
	 */
	getGroups() {
		return this._groups;
	};
	
	/**
	 * @return {Group}
	 */
	getDefaultGroup() {
		return this._default_group;
	};

	/**
	 * @return {Group}
	 */
	getAdministratorGroup() {
		return this._administrator_group;
	};

	run() {
		this.setAdministratorGroup(this.addGroup({
			name : "PIBox Team"
		}));

		this.setDefaultGroup(this.addGroup({
			name : "Default"
		}));
	};

	static getInstance() {
		if(this._instance === null) {
			this._instance = new GroupManager();
		}

		return this._instance;
	};
};

GroupManager._instance = null;

module.exports = {
	GroupManager : GroupManager,
	Group : Group
};