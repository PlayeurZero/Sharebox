let WebSocket = require('ws');
let User = require('core/user');
let fs = require('fs');

class SocketServer {
	/**
	 * @constructor
	 */
	constructor() {
		this.setOptions({ port : 8080, compression : { enabled : true } });
	};

	/**
	 * @param {Object} var1
	 * @param {number} var1.port
	 */
	setOptions(var1) {
		this._options = Object.assign(this._options || {}, var1);
	};

	/**
	 * @return {Object}
	 */
	getOptions() {
		return this._options;
	};

	run() {
		let options = this.getOptions();

		let server = new WebSocket.Server({
			port : options.port
		});

		server.on('connection', (socket) => {
			User.addUser(socket);
		});

		try {
			fs.statSync('server/uploads');
		} catch(e) {
			fs.mkdirSync('server/uploads');
		}

		try {
			fs.statSync('server/uploads/tmp');
		} catch(e) {
			fs.mkdirSync('server/uploads/tmp');
		}

		let uploads = fs.readdirSync('server/uploads');
		for(let upload of uploads) {
			let obj = fs.statSync('server/uploads/' + upload);
			
			if(obj.isFile()) {
				fs.unlinkSync('server/uploads/' + upload);
			}
		}
	};

	/**
	 * @return {SocketServer}
	 */
	static getInstance() {
		if(this._instance === null) {
			this._instance = new SocketServer();
		}

		return this._instance;
	};
};

SocketServer._instance = null;

module.exports = SocketServer;