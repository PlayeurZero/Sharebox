let GroupManager = require('core/groupmanager').GroupManager;
let Group = require('core/groupmanager').Group;
let User = require('core/user.js');

class Channel {
	/**
	 * @constructor
	 * @param {Object} var1
	 * @param {string} var1.name
	 * @param {Array.<Group>|Array.<string>} var1.allowed_groups
	 */
	constructor(var1) {
		this._name = null;
		this._users = [];
		this._allowed_groups = [];

		this._messages = [];
		this._downloads = [];

		if(!(typeof var1 === 'object')) {
			return;
		}

		if(typeof var1.name === 'string') {
			this.setName(var1.name);
		}

		if(Array.isArray(var1.allowed_groups)) {
			this.setAllowedGroups(var1.allowed_groups);
		}
	};
	
	/**
	 * @param {string} var1
	 */
	setName(var1) {
		this._name = var1;
	};

	/**
	 * @param {Object} var1
	 * @param {User} var1.user
	 * @param {boolean} var1.force
	 * @param {requestCallback} var1.callback
	 */
	addUser(var1) {
		if(var1.force === true) {
			ChannelManager.getInstance().removeUser(var1.user);
			this._users.push(var1.user);
			this.notifyMessages(var1.user);
			this.notifyDownloads(var1.user);
			var1.callback.call();

			this.notify({
					action: "user_joined",
					extra : {
						message : "user_joined",
						username : var1.user.getUsername()
					}
				})

			return;
		}

		for(let allowed_group of this.getAllowedGroups()) {
			if(var1.user.getGroup().is(allowed_group)) {
				ChannelManager.getInstance().removeUser(var1.user);
				this._users.push(var1.user);
				this.notifyMessages(var1.user);
				this.notifyDownloads(var1.user);
				var1.callback.call();

				this.notify({
					action: "user_joined",
					extra : {
						message : "user_joined",
						username : var1.user.getUsername()
					}
				})

				return;
			}
		}

		var1.callback.call(void(0), "translate:user/permission_denied");
	};

	/**
	 * @param {Group|String} var1
	 */
	addAllowedGroup(var1) {
		if(var1 instanceof Group) {
			if(!(this.getAllowedGroups().indexOf(var1) < 0)) {
				return;
			}

			this._allowed_groups.push(var1);
		} else if(typeof var1 === 'string') {
			let allowed_group = GroupManager.getInstance().getGroup(var1);

			if(!(allowed_group instanceof Group)) {
				return;
			}

			this._allowed_groups.push(allowed_group);
		}
	};

	/**
	 * @param {Array.<Group>|Array.<String>} var1
	 */
	setAllowedGroups(var1) {
		for(let allowed_group of var1) {
			if(!(allowed_group instanceof Group || typeof allowed_group === 'string')) {
				return;
			}

			this.addAllowedGroup(allowed_group);
		}
	};

	/**
	 * @return {string}
	 */
	getName() {
		return this._name;
	};

	/**
	 * @param {string} var1
	 * @return {User|null}
	 */
	getUser(var1) {
		for(let user of this._users) {
			if(user.getUsername() === var1) {
				return user;
			}
		};

		return null;
	};

	/**
	 * @param {User|string} var1
	 */
	removeUser(var1) {
		if(typeof var1 === 'string') {
			var1 = this.getUser(var1);
		}

		if(!(var1 instanceof User)) {
			return;
		}

		let index = this.getUsers().indexOf(var1);
		if(index < 0) {
			return;
		}

		this.notify({
			action : "user_left",
			extra : {
				message : "channel/user_left",
				username : var1.getUsername()
			}
		});

		this._users.splice(index, 1);
	};

	/**
	 * @param {User} var1
	 */
	hasUser(var1) {
		return !(this.getUsers().indexOf(var1) < 0);
	};

	/**
	 * @return {Array.<User>}
	 */
	getUsers() {
		return this._users;
	};

	/**
	 * @return {Array.<Group>}
	 */
	getAllowedGroups() {
		return this._allowed_groups;
	};

	/**
	 * @param {Object} var1
	 */
	addMessage(var1) {
		this._messages.push(var1);

		if(this._messages.length > 50) {
			this._messages.shift();
		}
	};

	getMessages() {
		return this._messages;
	};

	addDownload(var1) {
		this._downloads.push(var1);

		if(this._downloads.length > 20) {
			this._downloads.shift();
		}
	};

	getDownloads() {
		return this._downloads;
	};

	/**
	 * @param {User} var1
	 */
	notifyMessages(var1) {
		let messages = this.getMessages();

		for(let message of messages) {
			var1.notify(message);
		}
	};

	notifyDownloads(var1) {
		let downloads = this.getDownloads();

		for(let download of downloads) {
			var1.notify(download);
		}
	};

	/**
	 * @param {Object} var1
	 */
	notify(var1) {
		let users = this._users;

		if(var1.action === 'message_success') {
			this.addMessage(var1);
		};

		for(let i = 0; i < users.length; i++) {
			let user = users[i];

			user.notify(var1);
		};
	};
};

class ChannelManager {
	constructor() {
		this._channels = {};
		this._default_channel = null;
	};

	/**
	 * @param {Object} var1
	 * @param {string} var1.name
	 * @param {Array.<Group>|Array.<string>} var1.allowed_groups
	 * @return {Channel}
	 */
	addChannel(var1) {
		if(!(typeof var1 === 'object' && typeof var1.name === 'string')) {
			return;
		}

		let name = var1.name.toLowerCase();

		if(!(typeof this._channels[name] === 'undefined')) {
			return;
		}

		let channel = this._channels[name] = new Channel({
			name : var1.name,
			allowed_groups : var1.allowed_groups
		});

		return channel;
	};

	setDefaultChannel(var1) {
		this._default_channel = var1;
	};

	removeChannel(var1) {};

	/**
	 * @param {User} var1
	 * @return {Channel|null}
	 */
	getUserChannel(var1) {
		let channels = this.getChannels();
		for(let k in channels) {
			let channel = channels[k];
			if(channel.hasUser(var1)) {
				return channel;
			}
		}

		return null;
	};

	/**
	 * @param {string} var1
	 * @return {Channel}
	 */
	getChannel(var1) {
		let channel = this.getChannels()[var1.toLowerCase()];

		if(!(channel instanceof Channel)) {
			return null;
		}

		return channel;
	};

	/**
	 * @return {Array.<Channel>}
	 */
	getChannels() {
		return this._channels;
	};

	/**
	 * @param {User} var1
	 */
	removeUser(var1) {
		let channels = this.getChannels();
		for(let k in channels) {
			let channel = channels[k];

			if(channel.hasUser(var1)) {
				channel.removeUser(var1);
				return;
			}
		}
	};

	getDefaultChannel() {
		return this._default_channel;
	};

	run() {
		this.setDefaultChannel(this.addChannel({
			name : "default",
			allowed_groups : ["default"]
		}));

		this.addChannel({
			name : "PIBox Team" ,
			allowed_groups : ["pibox team"]
		});
	};

	static getInstance() {
		if(this._instance === null) {
			this._instance = new ChannelManager();
		}

		return this._instance;
	};
};

ChannelManager._instance = null;

module.exports = ChannelManager;