class Channel {
	constructor() {
		this._name = null;
		this._users = [];
		this._allowed_groups = [];
	};
	
	/**
	 * @param {string} var1
	 */
	setName(var1) {
		this._name = var1;
	};

	/**
	 * @param {User} var1
	 */
	addUser(var1) {
		this._users.push(var1);
	};

	/**
	 * @param {Array.<User>} var1
	 */
	setUsers(var1) {
		this._users = var1;
	};

	/**
	 * @param {Group} var1
	 */
	setAllowedGroups(var1) {
		this._allowed_groups = var1;
	};

	/**
	 * @return {string}
	 */
	getName() {
		return this._name;
	};

	/**
	 * @param {string} var1
	 * @return {User}
	 */
	getUser(var1) {
		let users = this._users;

		for(let i = 0; i < users.length; i++) {
			let user = users[i];

			if(user.getUsername() === var1) {
				return user;
			}
		};
	};

	/**
	 * @param {User} var1
	 */
	removeUser(var1) {
		if(typeof var1 === 'string') {
			var1 = this.getUser(var1);
		}

		if(!(var1 instanceof User)) {
			return;
		}

		let index = this.getUsers().indexOf(var1);
		if(index < 0) {
			return;
		}

		this._users.splice(index, 1); // TO TEST
	};

	/**
	 * @param {User} var1
	 */
	hasUser(var1) {
		return !(this.getUsers().indexOf(var1) < 0);
	};

	/**
	 * @return {Array.<User>}
	 */
	getUsers() {
		return this._users;
	};

	/**
	 * @return {Array.<Group>}
	 */
	getAllowedGroups() {
		return this._allowed_groups;
	};

	/**
	 * @param {Object} var1
	 */
	notify(var1) {
		let users = this._users;

		for(let i = 0; i < users.length; i++) {
			let user = users[i];

			user.notify(var1);
		};
	};
};

class ChannelManager {
	constructor() {
		this._channels = [];
		this._default_channel = null;
	};

	/**
	 * @param {Object} var1
	 * @return {Channel}
	 */
	addChannel(var1) {};

	setDefaultChannel(var1) {
		this._default_channel = var1;
	};

	removeChannel(var1) {};

	/**
	 * @param {string} var1
	 * @return {Channel}
	 */
	getChannel(var1) {};

	/**
	 * @param {User} var1
	 */
	removeUser(var1) {
		for(let channel of this.getChannels()) {
			if(channel.hasUser(var1)) {
				channel.removeUser(var1);
				return;
			}
		}
	};

	getDefaultChannel() {
		return this._default_channel;
	};

	static getInstance() {
		if(this._instance === null) {
			this._instance = new ChannelManager();
		}

		return this._instance;
	};
};

ChannelManager._instance = null;

module.exports = ChannelManager;